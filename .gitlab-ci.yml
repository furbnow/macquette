stages:
    - build
    - test
    - deploy
    - docs

python-test:
    stage: test
    needs: []
    image: python:3.10-slim
    services:
        - postgres:11
    variables:
        DEBUG: 1
        POSTGRES_DB: mhep
        POSTGRES_USER: 'postgres'
        POSTGRES_PASSWORD: 'postgres'
        POSTGRES_HOST_AUTH_METHOD: trust
        DATABASE_URL: 'postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB'
        DJANGO_SETTINGS_MODULE: config.settings.test
        PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'

    cache:
        key: python-test
        when: 'always'
        paths:
            - ${PIP_CACHE_DIR}
            - venv

    before_script:
        - python -V
        - apt-get update &&
          apt-get install --no-install-recommends -y make libharfbuzz-bin libpango-1.0-0 pangoft2-1.0-0
        - pip install virtualenv
        - virtualenv venv
        - source venv/bin/activate
        - pip -V
        - pip install pip-tools==6.12.1
        - pip-sync requirements/local.txt
    script:
        # Silence warnings
        - mkdir staticfiles
        - make check-types-python test-python
        - coverage xml

    artifacts:
        expose_as: test-output
        paths:
            - graph_results
        expire_in: 1 week

js-test:
    stage: test
    needs: []
    image: node:lts
    cache:
        key: js-test
        when: 'always'
        paths:
            - ${CI_PROJECT_DIR}/node_modules

    before_script:
        - (cd client && npm clean-install)
    script:
        - make check-types-js lint-js format-prettier test-js

pre-commit:
    stage: test
    needs: []
    image: python:3.10-slim
    variables:
        PIP_CACHE_DIR: '${CI_PROJECT_DIR}/.cache/pip'
        PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
    cache:
        key: pre-commit
        when: 'always'
        paths:
            - ${PIP_CACHE_DIR}
            - ${PRE_COMMIT_HOME}
            - ${CI_PROJECT_DIR}/node_modules

    script:
        - apt-get update && apt-get install -y git
        - python -V
        - pip install pre-commit==2.19.0
        - pre-commit run --all

docker-build:
    stage: build
    needs: []
    image: docker:latest
    services:
        - docker:dind
    variables:
        SERVICE_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        SERVICE_IMAGE_TAG_REF: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
        SERVICE_ASSETBUILDER_IMAGE_TAG_REF: $CI_REGISTRY_IMAGE/assetbuilder:$CI_COMMIT_REF_SLUG
    script:
        - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
        - docker pull "$SERVICE_IMAGE_TAG_REF" || true
        - docker pull "$SERVICE_ASSETBUILDER_IMAGE_TAG_REF" || true
        - docker build
          --cache-from="$SERVICE_ASSETBUILDER_IMAGE_TAG_REF"
          --tag "$SERVICE_ASSETBUILDER_IMAGE_TAG_REF"
          --target js
          .
        - docker build
          --cache-from="$SERVICE_IMAGE_TAG_REF"
          --cache-from="$SERVICE_ASSETBUILDER_IMAGE_TAG_REF"
          --pull
          --tag "$SERVICE_IMAGE_TAG"
          --tag "$SERVICE_IMAGE_TAG_REF"
          .
        - docker push "$SERVICE_ASSETBUILDER_IMAGE_TAG_REF"
        - docker push "$SERVICE_IMAGE_TAG_REF"
        - docker push "$SERVICE_IMAGE_TAG"

container-test:
    stage: test
    needs: ['docker-build']
    image: docker:latest
    services:
        - docker:dind
    variables:
        SERVICE_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    script:
        - apk update
        - apk add docker-compose make
        - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
        - docker pull "$SERVICE_IMAGE_TAG"
        - make test-container

pages:
    stage: docs
    needs: []
    image: sphinxdoc/sphinx:3.3.0
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
          changes:
              - docs/**/*

    artifacts:
        paths:
            - public

    script:
        - pip install sphinx-rtd-theme
        - make html -C docs/
        - mv docs/_build/html/ public/

trigger deploy:
    stage: deploy
    image: bitnami/git:latest
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
    before_script:
        - eval $(ssh-agent -s)
        - echo "${HRP_DEPLOY_KEY}" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    script:
        - git clone git@gitlab.com:retrofitcoop/hrp-deployment.git
        - cd hrp-deployment
        - git checkout staging # Should be a no-op
        - echo $CI_COMMIT_SHA > git-id
        - git add git-id
        - git config user.name 'Macquette CI pipeline'
        - git config user.email 'macquette-ci@example.com'
        - git commit -m "Deploy ${CI_COMMIT_SHA}"':'" ${CI_COMMIT_TITLE}"
        - git push
