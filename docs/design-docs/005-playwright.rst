==============================
005 UI testing with Playwright
==============================

The ideal approach would be to create a stub API server that could serve up
arbitrary assessment data. This assessment data could come from either
canned fixtures, or from fast-check. The client code could then be served
statically and configured to point at the stub API server.

This would avoid the complexity of making the Django service (and PostgreSQL)
dependencies of the UI tests, and thus avoid the further complexity of ensuring
the DB is in a known state before and in between test cases.

However, since some of the client code relies on Django templating, this is not
possible.

If we were to set up Playwright tests on the current codebase, we encounter the
following complexities:

- How to design the tests so that they can be run as part of a development
  workflow with locally-built assets, and also on CI against (likely) a
  docker-compose environment.
- How to ensure the DB contains data to test against in both these cases, while
  preserving any DB contents from local development.
- Running tests which modify the DB state in parallel
- Running tests against assessment data generated by fast-check

Therefore I propose that we keep in mind a long-term goal of moving to an API +
static assets approach, and for now do basic UI testing manually before
deployment. Perhaps manual UI testing could be done with the aid of a
checklist.

Other benefits of an API + static assets approach
=================================================

- It would make it easier to port the tool to a mobile app, or offline-first
  web app
- It could improve scalability
- It could allow moving to a more microservice based architecture
